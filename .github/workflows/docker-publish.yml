name: Docker

on:
  workflow_dispatch:
  schedule:
    - cron: '38 3 * * *'
  push:
    branches:
      - "17.0"
      - "18.0"
    paths:
      - '**'
      - '!README.md'

env:
  REGISTRY: ghcr.io
  REGISTRY_USERNAME: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-amd64:
    name: Build and Push AMD64
    runs-on: ubuntu-latest
    strategy:
      matrix:
        branch: [ "18.0", "17.0" ]
      fail-fast: false
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository on branch ${{ matrix.branch }}
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.branch }}

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.8.0
        with:
          cosign-release: 'v2.2.4'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for testing (AMD64)
        id: build-amd64
        uses: docker/build-push-action@v5
        with:
          context: ./src
          build-args: |
            ODOO_VERSION=${{ matrix.branch }}
          platforms: linux/amd64
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.branch }}-amd64-test
          push: false
          load: true

      - name: Run unit tests (AMD64)
        working-directory: tests
        env:
          TESTS_IMAGE_TAG: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.branch }}-amd64-test
          SKIP_BUILD: true
        run: ./unit-tests.sh

      - name: Log into registry (AMD64)
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Extract Docker metadata (AMD64)
        if: github.event_name != 'pull_request'
        id: meta-amd64
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ matrix.branch }}-amd64,enable=true

      - name: Build and push Docker image (AMD64)
        if: github.event_name != 'pull_request'
        id: build-and-push-amd64
        uses: docker/build-push-action@v5
        with:
          context: ./src
          platforms: linux/amd64
          build-args: |
            ODOO_VERSION=${{ matrix.branch }}
          tags: ${{ steps.meta-amd64.outputs.tags }}
          labels: ${{ steps.meta-amd64.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true

  build-and-push-arm64:
    name: Build and Push ARM64
    runs-on: macos-latest
    strategy:
      matrix:
        branch: [ "18.0", "17.0" ]
      fail-fast: false
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository on branch ${{ matrix.branch }}
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.branch }}
      - name: Setup docker (missing on MacOS)
        run: |
          brew install docker
          colima start
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.8.0
        with:
          cosign-release: 'v2.2.4'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for testing (ARM64)
        id: build-arm64
        uses: docker/build-push-action@v5
        with:
          context: ./src
          build-args: |
            ODOO_VERSION=${{ matrix.branch }}
          platforms: linux/arm64
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.branch }}-arm64-test
          push: false
          load: true

      - name: Run unit tests (ARM64)
        working-directory: tests
        env:
          TESTS_IMAGE_TAG: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.branch }}-arm64-test
          SKIP_BUILD: true
        run: ./unit-tests.sh

      - name: Log into registry (ARM64)
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Extract Docker metadata (ARM64)
        if: github.event_name != 'pull_request'
        id: meta-arm64
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ matrix.branch }}-arm64,enable=true

      - name: Build and push Docker image (ARM64)
        if: github.event_name != 'pull_request'
        id: build-and-push-arm64
        uses: docker/build-push-action@v5
        with:
          context: ./src
          platforms: linux/arm64
          build-args: |
            ODOO_VERSION=${{ matrix.branch }}
          tags: ${{ steps.meta-arm64.outputs.tags }}
          labels: ${{ steps.meta-arm64.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true

  create-manifest:
    name: Create Multi-Arch Manifest
    runs-on: ubuntu-latest
    needs: [ build-and-push-amd64, build-and-push-arm64 ]
    strategy:
      matrix:
        branch: [ "18.0", "17.0" ]
      fail-fast: false
    steps:
      - name: Log into registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Create manifest and push
        run: |
          docker manifest create \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.branch }} \
            --amend ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.branch }}-amd64 \
            --amend ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.branch }}-arm64

          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.branch }}

          if [ "${{ matrix.branch }}" = "18.0" ]; then
           docker manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
             --amend ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:18.0-amd64 \
             --amend ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:18.0-arm64
           docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          fi
